import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.util.*;
public class Inactive {

    /**
     * Merge looks at each input log generated by IPData.orderData() and merges them
     * into one log file which lists all IP addresses on all subnets in the logs which have not been active for more
     * than 'inactiveDays' days.
     *
     * @param inactiveDays The number of days to record inactivity of an IP address.
     * @param outputDir The directory to store the merge report.
     * @param logs      The file descriptors for each of the log files to be processed.
     */
    static void merge(int inactiveDays, String outputDir, List<File> logs) throws FileNotFoundException {
        File output = new File(outputDir + "\\" + "Inactive_" + inactiveDays + ".txt");
        Map<IP, LocalDate> old = new TreeMap<>();
        logs.forEach(f -> {
            try {
                parseInput(inactiveDays, old, f);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        });
        writeFile(old, output);
    }

    /**
     * Writes a file containing all IP addresses with a date older than 30 days
     * @param old The map containing (IP, Date) tuples
     * @param output the output file to write the data
     * @throws FileNotFoundException
     */
    private static void writeFile(Map<IP, LocalDate> old, File output) throws FileNotFoundException {
        PrintWriter writer = new PrintWriter(output);
        Iterator<IP> it = old.keySet().iterator();
        IP curIP;
        LocalDate curDate;
        while(it.hasNext()){
            curIP = it.next();
            curDate = old.get(curIP);
            writer.println(curDate.format(Scan.formatter) + "\t" + curIP);
        }
        writer.close();
    }

    /**
     * Parses input files into Map of (IP, Date) pairs
     * @throws FileNotFoundException
     */
    private static void parseInput(int inactiveDays, Map<IP, LocalDate> old, File input) throws FileNotFoundException {
        Scanner reader = new Scanner(input);
        LocalDate curDate;
        IP curIP;
        while (reader.hasNextLine()) {
            while (reader.hasNext()) {
                curDate = LocalDate.parse(reader.next(), Scan.formatter);
                curIP = new IP(reader.next());
                if (curDate.isBefore(LocalDate.now().minusDays(inactiveDays)))
                    old.put(curIP, curDate);
            }
        }
    }
}